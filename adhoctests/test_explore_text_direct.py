"""Demo de la nueva herramienta explore_other_workspace con TextDirectJudge."""

print("="*80)
print("NUEVA HERRAMIENTA: explore_other_workspace")
print("="*80)

print("""
üî• FUNCIONALIDAD IMPLEMENTADA:

1. ‚úÖ Nueva herramienta `explore_other_workspace` en ambos servidores
2. ‚úÖ Prioridad de par√°metros: qdrant_collection > workspace_path
3. ‚úÖ Formato de texto directo (no JSON) - EXPERIMENTAL
4. ‚úÖ Rerank por defecto (eliminando problemas de parsing)

üìã PAR√ÅMETROS:
- query: string (requerido) - B√∫squeda a realizar
- qdrant_collection: string (opcional) - Nombre de colecci√≥n expl√≠cito (PRIORIDAD ALTA)
- workspace_path: string (opcional) - Ruta del workspace (se calcula colecci√≥n)
- path: string (opcional) - Prefijo de ruta para filtrar resultados
- mode: "rerank" | "summary" (default: "rerank")

üéØ EJEMPLOS DE USO:

# Servidor principal (server.py)
superior_codebase_search(
    query="authentication implementation",
    qdrant_collection="codebase-abc123"  # Usa directamente esta colecci√≥n
)

# Si tienes ambos par√°metros, prioriza qdrant_collection
superior_codebase_search(
    query="login function",
    qdrant_collection="priority-collection",  # ‚úÖ USA ESTE
    workspace_path="/ignored/path"            # ‚ùå IGNORADO
)

# Solo workspace_path (calcula colecci√≥n autom√°ticamente)
superior_codebase_search(
    query="error handling",
    workspace_path="/media/eduardo/56087475087455C9/Dev/independent-embeddings-indexer"
)

# Servidor local (server_local.py) - Mismo comportamiento
superior_codebase_rerank(
    query="database connection",
    qdrant_collection="codebase-local-xyz789"
)

üß™ FORMATO MEJORADO - Text Direct vs JSON:

ANTES (JSON Judge):
{
  "reranked": [
    {
      "filePath": "src/auth.py",
      "relevancia": 0.95,
      "razon": "Contains authentication logic"
    }
  ]
}

AHORA (Text Direct Judge - MEJORADO):
FILE: src/auth.py
RELEVANCE: 0.95
CODE_SNIPPET: def authenticate_user(username, password):
REASON: Contains the main authentication implementation

FILE: src/login.py
RELEVANCE: 0.87
CODE_SNIPPET: login_handler = (req, res) => {
REASON: Handles login requests and validation

FILE: src/session.py
RELEVANCE: 0.82
CODE_SNIPPET: class SessionManager:
REASON: Manages user session lifecycle

VENTAJAS del formato mejorado:
‚úÖ Sin problemas de JSON malformado
‚úÖ CODE_SNIPPET muestra l√≠neas de c√≥digo relevantes
‚úÖ No vas "a ciegas" - ves exactamente qu√© c√≥digo es relevante
‚úÖ Parsing m√°s simple y confiable
‚úÖ Formato en ingl√©s m√°s consistente
‚úÖ Informaci√≥n m√°s rica para tomar decisiones

üî¨ COMPARACI√ìN DE RENDIMIENTO:

explore_other_workspace (NUEVO):
- ‚úÖ TextDirectJudge (experimental)
- ‚úÖ Sin fallbacks complejos de JSON
- ‚úÖ Rerank siempre habilitado
- ‚úÖ Formato de salida m√°s limpio

superior_codebase_rerank (EXISTENTE):
- ‚ùå Judge con JSON parsing
- ‚ùå M√∫ltiples fallbacks por JSON malformado
- ‚ùå Complejidad adicional de manejo de errores

üìä PRUEBAS RECOMENDADAS:

1. Test con colecci√≥n expl√≠cita:
   explore_other_workspace(
       query="function definition",
       qdrant_collection="codebase-test123"
   )

2. Test con workspace path:
   explore_other_workspace(
       query="import statements",
       workspace_path="/media/eduardo/56087475087455C9/Dev/independent-embeddings-indexer"
   )

3. Test de prioridades:
   explore_other_workspace(
       query="class definition",
       qdrant_collection="priority-col",  # ‚úÖ Se usa este
       workspace_path="/ignored/path"     # ‚ùå Se ignora
   )

4. Test con summary:
   explore_other_workspace(
       query="error handling patterns",
       qdrant_collection="codebase-xyz",
       mode="summary"
   )

üöÄ PR√ìXIMOS PASOS:

1. Probar consistencia del TextDirectJudge vs Judge normal
2. Evaluar calidad de resultados
3. Si funciona bien, migrar otras herramientas al formato de texto
4. Documentar las mejoras en robustez

üí° NOTAS T√âCNICAS:

- TextDirectJudge usa el mismo endpoint que Judge normal
- System prompt en INGL√âS para mayor consistencia
- NUEVO: Campo CODE_SNIPPET obligatorio con l√≠neas de c√≥digo relevantes
- Parsing con regex simple en lugar de JSON.loads()
- Compatibilidad con espa√±ol para transici√≥n (RELEVANCIA/RAZON)
- Fallback a resultados originales si TextDirectJudge falla
- Compatible con ambos servidores (server.py y server_local.py)
- Formato: FILE: | RELEVANCE: | CODE_SNIPPET: | REASON:
""")

print("="*80)
print("IMPLEMENTACI√ìN COMPLETADA ‚úÖ")
print("="*80)